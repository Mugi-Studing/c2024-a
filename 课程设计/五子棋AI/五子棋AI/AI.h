#pragma once
#include <thread>
#include <mutex>
#include <atomic>
#include "Chess.h"
class AI
{
public:
	void init(Chess* chess);
	void go();
private:
	Chess* chess;
	vector<vector<int>> scoreMap;

	mutex mtx;
	atomic<int>bestValue;
	ChessPos bestMove;

	int alphabeta(int alpha, int beta, bool playerFlag, int depth, vector<ChessPos> choices, vector<vector<int>> Map);
	ChessPos findBestMove(int depth);
	bool match_shape(int x, int y, int dx, int dy, vector<int>& shape_pattern, vector<vector<int>> Map);
	int evaluate(bool flayerFlag, vector<vector<int>> Map);

	//如果旁边3x3没有棋子，那么就没必要下，大概率没用
	bool hasNeighbour(int row, int col);


	/*分成两个数组评分的原因
		例如，
		死四{1,-1,-1,-1,-1,0}
		如果是自己的回合，直接赢了
		如果是对方的回合，那就废了
		所以根据是谁的回合，给不同的分数
	*/

	vector<pair<int, vector<int>>> shape_score1 = {

		//如果此时是黑棋下，评分



		//活二
		{-10, {0, 1, 1, 0}},
		//死二   防守，所以加分
		{10,{-1,1,1}},
		{10,{1,1,-1}},
		//死三
		{30, {-1, 1, 1, 1, 0}},
		{30, {0, 1, 1, 1, -1}},
		{30, {-1,1, 1, 1, -1}},
		//活三
		{-10000, {0, 1, 1, 1, 0}}, //黑棋再下两步直接赢了
		{-10000, {1,0,1,1}},
		{-10000, {1,1,0,1}},

		//死四
		{-10000, {-1, 1, 1, 1, 1, 0}},//黑棋再下一步直接赢了
		{-10000, {0, 1, 1, 1, 1, -1}},

		//{,{-1,1,1,1,1,-1}},//防守


		//活四
		{-10000,{0,1,1,1,1,0}},//不能让这两种情况发生，所以给负分
		{-10000, {1,1,0,1,1}},
		//连五
		{-20000,{1,1,1,1,1}},


		//白棋

		//活二
		{200,{0,-1,-1,0}},
		//死三
		{300,{1,-1,-1,-1,0}},
		{300,{0,-1,-1,-1,1}},
		//活三
		{1000,{0,-1,-1,-1,0}},
		//死四
		{0,{1,-1,-1,-1,-1,0}},
		{0,{0,-1,-1,-1,-1,1}},
		//活四
		{10000,{0,-1,-1,-1,-1,0}},
		//连五
		{100000,{1,-1,-1,-1,-1}}



	};
	vector<pair<int, vector<int>>> shape_score2 = {
		//如果此时是白棋下，评分
		//活二
		{-10, {0, 1, 1, 0}},
		//死二   防守，所以加分
		{10,{-1,1,1}},
		{10,{1,1,-1}},
		//死三
		{100, {-1, 1, 1, 1, 0}},
		{100, {0, 1, 1, 1, -1}},
		{100, {-1,1, 1, 1, -1}},
		//活三
		{-1000, {0, 1, 1, 1, 0}},
		//死四
		{0, {-1, 1, 1, 1, 1, 0}},
		{-40, {0, 1, 1, 1, 1, -1}},
		{1000,{-1,1,1,1,1,-1}},//防守


		//活四
		{-20000,{0,1,1,1,1,0}},//不能让这两种情况发生，所以给负分
		//连五
		{-20000,{1,1,1,1,1}},


		//白棋

		//活二
		{10,{0,-1,-1,0}},
		//死三
		{100,{1,-1,-1,-1,0}},
		{100,{0,-1,-1,-1,1}},
		//活三
		{99999,{0,-1,-1,-1,0}},
		//死四
		{99999,{1,-1,-1,-1,-1,0}},
		{99999,{0,-1,-1,-1,-1,1}},
		{0,{1,-1,-1,-1,-1,1}},
		//活四
		{99999,{0,-1,-1,-1,-1,0}},
		//连五
		{99999,{1,-1,-1,-1,-1}}


	};


};